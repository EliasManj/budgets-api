// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  description, budget_id, account_id, amount
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, description, amount, account_id, budget_id, created_at
`

type CreateTransactionParams struct {
	Description string
	BudgetID    int32
	AccountID   int32
	Amount      int64
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Description,
		arg.BudgetID,
		arg.AccountID,
		arg.Amount,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.AccountID,
		&i.BudgetID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, description, amount, account_id, budget_id, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.AccountID,
		&i.BudgetID,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactionsByAccount = `-- name: ListTransactionsByAccount :many
SELECT id, description, amount, account_id, budget_id, created_at FROM transactions
WHERE account_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListTransactionsByAccountParams struct {
	AccountID int32
	Limit     int32
	Offset    int32
}

func (q *Queries) ListTransactionsByAccount(ctx context.Context, arg ListTransactionsByAccountParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByAccount, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.AccountID,
			&i.BudgetID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByBudget = `-- name: ListTransactionsByBudget :many
SELECT id, description, amount, account_id, budget_id, created_at FROM transactions
WHERE budget_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListTransactionsByBudgetParams struct {
	BudgetID int32
	Limit    int32
	Offset   int32
}

func (q *Queries) ListTransactionsByBudget(ctx context.Context, arg ListTransactionsByBudgetParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByBudget, arg.BudgetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Amount,
			&i.AccountID,
			&i.BudgetID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
