// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    account_name, balance, account_owner, account_type
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, account_name, balance, account_owner, account_type, created_at
`

type CreateAccountParams struct {
	AccountName  string
	Balance      int64
	AccountOwner string
	AccountType  string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.AccountName,
		arg.Balance,
		arg.AccountOwner,
		arg.AccountType,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.Balance,
		&i.AccountOwner,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const deleteAllUserAccounts = `-- name: DeleteAllUserAccounts :exec
DELETE FROM accounts WHERE account_owner = $1
`

func (q *Queries) DeleteAllUserAccounts(ctx context.Context, accountOwner string) error {
	_, err := q.db.ExecContext(ctx, deleteAllUserAccounts, accountOwner)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, account_name, balance, account_owner, account_type, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.Balance,
		&i.AccountOwner,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, account_name, balance, account_owner, account_type, created_at FROM accounts
WHERE account_owner = $1
order by account_name
LIMIT $2
OFFSET $3
`

type ListAccountsParams struct {
	AccountOwner string
	Limit        int32
	Offset       int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.AccountOwner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountName,
			&i.Balance,
			&i.AccountOwner,
			&i.AccountType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts SET balance = balance + $1
WHERE id = $2
RETURNING id, account_name, balance, account_owner, account_type, created_at
`

type UpdateAccountBalanceParams struct {
	Amount int64
	ID     int32
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.Balance,
		&i.AccountOwner,
		&i.AccountType,
		&i.CreatedAt,
	)
	return i, err
}
